openapi: 3.0.0
info:
  title: Pet API
  version: 1.0.0
  description: API for managing pets.
paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: Health check success
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                required:
                  - status

  /pets/{id}:
    get:
      summary: Get a pet by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pet found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - {}
        - JWT: []

    put:
      summary: Update a pet by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 200 response
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetUpdate'
      security:
        - {}
        - JWT: []

  /pets:
    get:
      description: Get pets
      parameters:
        - name: name
          in: query
          required: false
          description: Name of the pets to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Pets found
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
      security:
        - {}
        - JWT: []

    post:
      summary: Create a new pet
      responses:
        '201':
          description: Pet created
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Pet'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetCreate'
      security:
        - {}
        - JWT: []

  /findPetsByType:
    get:
      description: Get pets by type
      parameters:
        - name: petType
          in: query
          required: true
          description: type of the pets to retrieve
          schema:
            $ref: '#/components/schemas/PetType'
      responses:
        '200':
          description: Pets found
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Type query parameter is required
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - {}
        - JWT: []

components:
  schemas:
    Pet:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        petType:
          $ref: '#/components/schemas/PetType'
      required:
        - id
        - name
        - petType
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            name:
              type: string
            message:
              type: string
          required:
            - name
            - message
      required:
        - error
    PetCreate:
      type: object
      properties:
        name:
          type: string
        petType:
          $ref: '#/components/schemas/PetType'
      required:
        - name
        - petType
    PetUpdate:
      type: object
      properties:
        name:
          type: string
        petType:
          $ref: '#/components/schemas/PetType'
    PetType:
      type: string
      enum:
        - dog
        - cat
        - fish

  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Backstage Permissions Framework JWT
